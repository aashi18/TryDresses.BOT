using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Web;
using Microsoft.Bot.Builder.Dialogs;
using Microsoft.Bot.Builder.FormFlow;
using Microsoft.Bot.Connector;
using System.Reflection;
using System.Diagnostics;

namespace TryDresses.Dialogs
{
    [Serializable]
    public class VitonDialog : IDialog<object>
    {
        public async Task StartAsync(IDialogContext context)
        {


            var a = run_cmd(context, "C:/Users/mtcuser/Documents/VITON-master/model_zalando_mask_content_test.py");
            //var a = run_cmd(context, "C:/Users/Administrator/Desktop/f.py");
            //await context.PostAsync(a);
            MLApp.MLApp matlab = new MLApp.MLApp();
            matlab.Execute(@"cd C:\Users\mtcuser\Documents\VITON-master");
            object result = null;
            matlab.Feval("shape_context_warp", 0, out result);
            a = run_cmd(context, "C:/Users/mtcuser/Documents/VITON-master/model_zalando_refine_test.py");
            //await context.PostAsync(a);
            context.Call(new ShowImageDialog(), this.ResumeAfterOptionDialog);

        }

        public string run_cmd(IDialogContext context, string cmd)
        {
            ProcessStartInfo start = new ProcessStartInfo();
            start.FileName = "C:\\Program Files (x86)\\Microsoft Visual Studio\\Shared\\Anaconda3_64\\python.exe";

            start.Arguments = string.Format("\"{0}\"", cmd);

            //context.PostAsync(start.Arguments);
            start.UseShellExecute = false;// Do not use OS shell
            start.CreateNoWindow = true; // We don't need new window
            start.RedirectStandardOutput = true;// Any output, generated by application will be redirected back
            start.RedirectStandardError = true; // Any error in standard output will be redirected back (for example exceptions)
            using (Process process = Process.Start(start))
            {
                //ExecuteCommandSync(context, "dir");
                using (StreamReader reader = process.StandardOutput)
                {
                    string stderr = process.StandardError.ReadToEnd(); // Here are the exceptions from our Python script
                    string result = reader.ReadToEnd(); // Here is the result of StdOut(for example: print "test")
                    return stderr;
                }
            }
        }
        private async Task ResumeAfterOptionDialog(IDialogContext context, IAwaitable<object> result)
        {

        }




    }
}